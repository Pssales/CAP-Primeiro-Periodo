A forma resultante de uma PR-Quadtree é independente da ordem em que os pontos são inseridos.

A comparação do MX, PR e quadtrees de pontos reduz, em parte, uma comparação de seus respectivos métodos de decomposição.


Uma diferença importante entre as três estruturas de dados está no tamanho das regiões associadas a cada ponto de dados. Para o ponto quadtree não existe uma restrição a priori no tamanho do espaço ocupado pela quadtree (isto é, as coordenadas x e y dos pontos de dados). Para as quadtrees MX e PR, o espaço ocupado pela quadtree é restrito a uma largura e altura máximas. Todas as três quadtrees resultam na associação de uma região retangular com cada ponto de dados. O ponto quadtree produz um retângulo que pode, às vezes, ser de largura e altura infinitas. Para o MX quadtree esta região deve ser um quadrado com um tamanho particular associado a ele.

O PR quadtree também tem uma região quadrada, e seu tamanho depende de quais outros pontos de dados são atualmente representados por nós na quadtree. No caso do MX quadtree existe um sistema de coordenadas discretas fixo associado ao espaço ocupado pela quadtree, enquanto que tal limitação não existe para o quadtree PR. A vantagem de tal sistema de coordenadas fixo é que não há necessidade de armazenar informações de coordenadas com o nó folha de um ponto de dados. A desvantagem é que a discretização do domínio dos pontos de dados limita a diferenciação entre pontos de dados.
O tamanho e a forma de uma quadtree são importantes do ponto de vista da eficiência das operações de armazenamento e pesquisa. O tamanho e a forma do ponto quadtree são extremamente sensíveis à ordem na qual os pontos de dados são inseridos durante o processo de construção. Isto significa que para um ponto quadtree de M registros, sua profundidade máxima é M - 1 (ie, um registro é armazenado em cada nível na árvore), enquanto sua profundidade mínima é Llog4 (3.M) J (isto é, cada nível na árvore está completamente cheio), onde assumimos que a raiz da árvore tem uma profundidade de 0. Em contraste, a forma e o tamanho das quadtrees MX e PR são independentes da ordem de inserção. Para o MX quadtree
Todos os nós correspondentes aos pontos de dados aparecem na mesma profundidade na quadtree. A profundidade da quadtree MX depende do tamanho do espaço ocupado pela quadtree e do número máximo de elementos permitidos em cada linha e coluna da quadtree correspondente.
matriz. Por exemplo, para uma matriz de 2 nby 2 n, todos os pontos de dados aparecerão como nós folha a uma profundidade de n.

O tamanho e a forma da quadtree PR dependem dos pontos de dados atualmente na quadtree. A profundidade mínima de uma quadtree PR para M> 1 pontos de dados é [log4 (M - 1)] (ou seja, todos os pontos de dados estão no mesmo nível), enquanto não há limite superior na profundidade em termos de número de pontos de dados. Em particular, para uma região quadrada de comprimento lateral s, tal que a distância euclidiana mínima que separa dois pontos seja d, a profundidade máxima da quadtree pode ser tão alta quanto [log2 ((s / d). "~ / 2)] .

O volume de dados também afeta a comparação entre as três quadtrees. Quando o volume é muito alto, o MX quadtree perde um pouco de sua vantagem, já que uma representação de array pode ser mais econômica em termos de espaço, já que não há necessidade de links.
Considerando que o tamanho do PR quadtree foi visto como afetado pelo clustering de pontos de dados, especialmente quando o número de dados é relativamente pequeno, isso não é um fator no tamanho de um ponto quadtree. No entanto, quando o volume de dados é grande e é uniformemente distribuído, o efeito de clustering é diminuído e não deve haver muita diferença na eficiência de armazenamento entre as quadtrees de point e PR.

 PM quadtree representa um mapa poligonal usando a quadtree PR discutida na Seção 3.2. Cada vértice no mapa corresponde a um ponto de dados na quadtree PR.

 Definimos um q-edge para ser um segmento de uma aresta do mapa que abrange um bloco inteiro na quadtree PR (por exemplo, segmento RS na Figura 61) ou se estende de um limite de um bloco para um vértice dentro do bloco ( isto é, quando o bloco contém um vértice, por exemplo, segmento CV na Figura 61).
Para cada folha na quadtree PR particionamos todas as suas q-edges em sete classes. Cada uma dessas classes é armazenada em uma árvore binária balanceada [Aho et al. 1974]. Uma classe corresponde ao conjunto de arestas q que se encontram em um vértice dentro da região do bloco.
Essa classe é ordenada de maneira angular.
As q-arestas restantes que passam pela região do bloco devem entrar em um lado e sair por outro. Isso produz seis classes: NW, NS, NE, EW, SW e SE, onde SW denota q arestas que cruzam os limites sul e oeste da região do bloco. Observe que essas classes geralmente estão vazias. As arestas q dessas classes são ordenadas pela posição de suas interceptações ao longo do perímetro da região do bloco. Uma aresta q que coincide com o limite da região de uma folha é colocada na classe NS ou EW, conforme apropriado.
Por exemplo, considere o mapa poligonal da Figura 60 e sua quadtree PM correspondente na Figura 61. O bloco contendo o vértice C tem uma árvore binária balanceada para o vértice C de interseção q-arestas (três
nós de árvore binária balanceada para q-edges CM, CN e CV) e uma árvore binária balanceada para as arestas q que cruzam o limite NW (um nó de árvore binária balanceada para qedge ST). No total, a quadtree PM da Figura 61 contém sete nós de folhas quadtree e nove árvores binárias balanceadas não vazias contendo dezessete nós.
O PM quadtree fornece uma estrutura de dados conveniente e razoavelmente eficiente para executar várias operações. A determinação pontual do polígono é obtida encontrando-se limiar de q-aresta em relação a cada uma das sete classes e depois selecionando
mais próximo dos sete como o verdadeiro limiar q-edge. O tempo de execução deste procequadtree. Deve-se notar que a profundidade
da PM quadtree é inversamente proporcional ao log da separação mínima entre dois vértices mais o log do número de arestas no mapa poligonal [Samet e Webber 1983]. Além da determinação pontual no polígono, existem algoritmos eficientes para inserção de uma aresta no mapa, sobrepondo dois mapas, recortando e criando um mapa em um mapa e pesquisando o intervalo (isto é, determinando todos os polígonos dentro de uma determinada distância de um ponto). A borda-EXCELL